<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[learnNode3]]></title>
    <url>%2F2019%2F03%2F18%2FlearnNode3%2F</url>
    <content type="text"><![CDATA[套接字之间传送的数字称为流，buffer对象在流中传送二进制数据，通过Unicode编码方式传送一个字符串。数据最终包装成数据包传送。套接字通过FIN数据包表明本次传输完成。本次创建一个TCP服务端，监听客户端的数据接收和客户端连接是否关闭。 1234567891011121314var net = require(&apos;net&apos;);var server = net.createServer(function(conn)&#123; console.log(&apos;connected&apos;); conn.on(&apos;data&apos;,function(data)&#123; console.log(data + &apos; from &apos; + conn.remoteAddress + &apos; &apos; + conn.remotePort); conn.write(&apos;Repeating: &apos;+data); &#125;); conn.on(&apos;close&apos;,function()&#123; console.log(&apos;Client closed connection&apos;); &#125;);&#125;).listen(8124);console.log(&apos;listening on port 8124&apos;); 创建TCP客户端，在套接字接口调用setEncoding方法改变接收数据的编码处理方式，转换为UTF8格式，监听数据接收和服务器连接关闭事件。 12345678910111213141516171819202122232425var net = require(&apos;net&apos;);var client = new net.Socket();client.setEncoding(&apos;utf8&apos;);client.connect(&apos;8124&apos;,&apos;localhost&apos;,function()&#123; console.log(&apos;connected to server&apos;); client.write(&apos;Who needs a browser to communicate?&apos;);&#125;);process.stdin.resume();//从终端（命令行）获取数据process.stdin.on(&apos;data&apos;,function(data)&#123; client.write(data);&#125;);client.on(&apos;data&apos;,function(data)&#123; console.log(data);&#125;);client.on(&apos;close&apos;,function()&#123; console.log(&apos;connection is closed&apos;);&#125;); UDP模块的标识符是dgram require(‘dgram’); UDP模块连接 UDO套接字只接受buffer对象，数据包装在buffer对象里面，调用buffer对象的toString方法将缓冲区的数据转换为一个字符串。下面为UDP客户端 12345678910111213var dgram = require(&apos;dgram&apos;);var client = dgram.createSocket(&apos;udp4&apos;);//创建UDP套接字参数udp4或udp6process.stdin.on(&apos;data&apos;,function(data)&#123; console.log(data.toString(&apos;utf8&apos;)); client.send(data,0,data.length,8124,&quot;localhost&quot;,function(err,bytes)&#123; if(err) console.log(&apos;error&apos;+err); else console.log(&apos;successful&apos;); &#125;);&#125;); UDP服务器端 12345678var dgram = require(&apos;dgram&apos;);var server = dgram.createSocket(&quot;udp4&quot;);server.on(&quot;message&quot;,function(msg,rinfo)&#123; console.log(&quot;message: &quot;+msg+&quot; from &quot; + rinfo.address+&quot;:&quot;+rinfo.port);&#125;);server.bind(8124); 无论UDP客户端还是服务端，不用使用close方法关闭套接字，应为没有维护一个持续连接]]></content>
      <categories>
        <category>学习</category>
        <category>node.js TCP服务器</category>
      </categories>
      <tags>
        <tag>node.js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[useGit]]></title>
    <url>%2F2019%2F03%2F10%2FuseGit%2F</url>
    <content type="text"><![CDATA[git常用命令 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778mkdir &lt;file&gt; 创建文件夹cd &lt;file&gt; 跳到具体文件夹pwd 显示当前路径git init 初始化git仓库git add &lt;filename&gt; 提交文件到仓库git commit -m&quot;describe&quot; 添加说明git status 仓库当前的状态git diff 查看修改的内容git log 查看历史记录，可查看版本号git log --pretty=oneline 查看一行记录git reflog 查看历史命令git reset --hard HEAD^ 返回到上一版本HEAD为当前版本，HEAD^为上一版本，同样HEAD^^为上上版本git reset --hard 版本号 返回到某一具体版本git checkout --&lt;filename&gt; 丢弃工作区的内容，即add提交的内容git reset HEAD &lt;filename&gt; 丢弃暂存区，回到工作区，即丢弃commit的内容git rm file 从版本库中删除文件rm file 删除文件git checkout --file 从版本库的文件替换工作区的文件ssh-keygen -t rsa -C &quot;email&quot; 创建SSH KEYgit remote add origin 仓库地址 关联远程库，库名origin可设其它git push -u origin master 第一次向远程库origin推送master分支的所有内容 git push origin master 向远程库origin推送master分支的最新内容git clone 仓库地址 克隆远程仓库，库名默认origingit checkout -b dev 创建并切换到dev分支git branch dev 创建dev分支git checkout dev 切换到dev分支git branch 查看当前分支git merge dev 把dev分支合并到当前分支下git branch -d dev 删除dev分支git log --graph 查看分支合并图git log --graph --pretty=oneline --abbrev-commit 查看简洁（一行）的分支合并图git merge --no-ff -m&quot;描述&quot; dev 采用no-ff普通模式的方式合并dev分支，会创建一个新的commit，加上-m描述git merge dev 默认采用fast -forward模式合并，会丢失分支信息合并分支步骤：1.合并无冲突，删除分支2.合并有冲突，手动修改冲突内容，提交内容，删除分支git stash 储藏未完成的工作，即储存工作区的内容，可恢复后台继续工作git stash list 查看工作现场git stash pop 恢复工作现场并删除stash内容git remote 查看远程库信息git remote -v 查看远程库详细信息git push origin dev 推送dev分支的内容到远程库推送失败处理步骤：git pull 抓取远程库的最新提交的内容，并手动解决冲突git checkout -b branch-name origin/branch-name 在本地创建和远程分支的关联git rebase 将提交到某一分支的所有内容修改并移到另一条分支上git tag &lt;tagname&gt; commiID 在最新提交的commit上打上标签，即默认commitID为HEAD，否则对应id打标签git tag -a &lt;tagname&gt; -m&quot;描述&quot; commitID 指定标签来添加描述git tag 查看所有标签git show &lt;tagname&gt; 查看标签信息git tag -d tagname 删除标签git push origin tagname 把本地标签推送到远程库git push origin --tags 一次推送全部本地标签到远程库git push origin irefs/tags/&lt;tagname&gt; 删除远程标签git remote rm origin 删除与远程库origin的联系根目录下创建.gitignore文件，填写文件名，该文件会被忽略]]></content>
      <categories>
        <category>学习</category>
        <category>命令</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第一次]]></title>
    <url>%2F2019%2F03%2F10%2FfirstTime%2F</url>
    <content type="text"><![CDATA[本人的第一个博客开通啦！我是谁？我从哪里来？又到那里去？这是一个有深意的问题。本人热爱学习，正在前端与后台领域奋斗 以下为初次练习Markdown 列表1 列表2 列表项 列表项 vue导航 斜体字加粗字 &lt;html&gt;一行代码嵌入区&lt;/html&gt; 123456&lt;html&gt;&lt;head&gt;标题&lt;/head&gt;&lt;body&gt; &lt;div&gt;&lt;p&gt;body主体&lt;/p&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 引用内容]]></content>
      <categories>
        <category>我们聊聊</category>
      </categories>
      <tags>
        <tag>介绍</tag>
      </tags>
  </entry>
</search>
